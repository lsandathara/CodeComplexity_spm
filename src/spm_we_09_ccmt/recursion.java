/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spm_we_09_ccmt;

import com.sun.awt.AWTUtilities;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.jvnet.substance.SubstanceDefaultLookAndFeel;
import org.jvnet.substance.button.ClassicButtonShaper;
import org.jvnet.substance.painter.GradientWaveGradientPainter;
import org.jvnet.substance.theme.SubstanceDarkVioletTheme;
import org.jvnet.substance.theme.SubstanceSunsetTheme;
import org.jvnet.substance.watermark.SubstanceFabricWatermark;

/**
 *
 * @author Owner
 */
public class recursion extends javax.swing.JFrame {

    /**
     * Creates new form inheritancecomplexty
     */
    public recursion() {
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(d);
        ImageIcon imageicon = new ImageIcon(getClass().getResource("/SPM_WE_09_CCMT/icons8_Search_48px.png"));
        Image image = imageicon.getImage();
        setIconImage(image);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inheritance Complexity Calculater");
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 0, 102));
        jPanel1.setForeground(new java.awt.Color(0, 0, 51));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("public class FactMain {\n" +
"  public static void main(String args[]) {\n" +
"    for (int counter = 0; counter <= 10; counter++)\n" +
"      System.out.printf(\"%d! = %d\\n\", counter, factorial(counter));\n" +
"  }\n" +
"\n" +
"  // recursive declaration of method factorial\n" +
"  public static long factorial(long number) {\n" +
"    if (number <= 1) // test for base case\n" +
"      return 1; // base cases: 0! = 1 and 1! = 1\n" +
"    else\n" +
"      // recursion step\n" +
"      return number * factorial(number - 1);\n" +
"  }\n" +
"}");
        jTextArea1.setToolTipText("Enter your code here...");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Filter Code");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line No", "Scope", "Code Line", "Cs", "Ctc", "Cnc", "Ci", "Tw", "Cps", "Cr"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(870);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(70);
        }

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("-");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("X");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Complexity of the Program");

        jLabel2.setBackground(new java.awt.Color(204, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
//

        int totalCount = 0;
        int count = 0;

        DefaultTableModel defaultModel = (DefaultTableModel) jTable1.getModel();
        defaultModel.setRowCount(0);

        String whole = jTextArea1.getText();

        String[] string = whole.split("\\n");

        String mName = "";
        ArrayList<String> list = new ArrayList<>();

        for (int k = 0; k < string.length; k++) {

            if (!(string[k].trim().isEmpty())) {

                String line = string[k];
                for (int l = 0; l < 20; l++) {
                    line = line.replace(" (", "(");
                }

                int public1 = line.split("public").length - 1;
                int private1 = line.split("private").length - 1;
                int protected1 = line.split("protected").length - 1;
                String[] public_array = line.split("public");
                String[] private_array = line.split("private");
                String[] protected_array = line.split("protected");

                if ((public1 > 0) || (private1 > 0) || (protected1 > 0)) {

                    String[] method = "".split("");
                    if ((public1 > 0)) {
                        method = public_array[1].split("");
                    } else if ((private1 > 0)) {
                        method = private_array[1].split("");
                    } else if ((protected1 > 0)) {
                        method = protected_array[1].split("");
                    }

                    mName = "";
                    int i = 0;

                    if (line.split("public static void main").length > 1) {
                        mName = "Main Method";
                    } else {
                        for (int j = method.length - 1; j >= 0; j--) {
                            if (method[j].equals("(")) {
                                i = 1;
                            }
                            if (method[j].equals(" ") && i == 1) {
                                break;
                            }
                            mName = method[j] + mName;
                        }

                    }
                }

                String[] mFirst = mName.split("");
                String filterMName = "";
                int i = 0;
                for (int j = mFirst.length - 1; j >= 0; j--) {

                    if (mFirst[j].equals("(")) {
                        i = 1;
                    }
                    if (i == 1) {
                        filterMName = mFirst[j] + filterMName;
                    }
                }

                //if (filterMName.equals("")) {
                   // filterMName = "hish asiu ivb vbvy bviybbi bei";
                //}

                Vector vector = new Vector();
                vector.add(k + 1);
                vector.add(mName.replaceAll("[{]", ""));
                vector.add(line);
                if (line.contains(mName)) {
                    vector.add(line);
                } else if (line.contains(filterMName)) {
                    list.add(mName.replaceAll("[{]", ""));
                    vector.add(line);
                } else {
                    vector.add(line);
                }
                defaultModel.addRow(vector);

            }
        }

        try {
            for (String name : list) {
                for (int i = 0; i < jTable1.getRowCount(); i++) {
//                if (defaultModel.getValueAt(k, 1).equals(name)) {
//                     if (defaultModel.getValueAt(k, 2).toString().contains(";")||defaultModel.getValueAt(k, 2).toString().contains("{")) {
//
//                      defaultModel.setValueAt("CP * 2", k, 9);
//                     }
//                     }
                    //df.setValueAt("", k, 3);
                    if (isNonValueExcludeLine(defaultModel.getValueAt(i, 2).toString())) {
                        //  System.out.println("LINE " + line);
                        // System.out.println("count :" + count);
                        defaultModel.setValueAt("0", i, 3);
                    } else {
                        //  calculateSizefactorPerLine(defaultModel.getValueAt(k, 2).toString());
                        //   System.out.println("count :" + count);
                        count = calculateSizefactorPerLine(defaultModel.getValueAt(i, 2).toString());
                        totalCount = totalCount + count;
                        defaultModel.setValueAt(count, i, 3);
                        System.out.println("COUNT :" + count);
                    }
                    jLabel2.setText(Integer.toString(totalCount / 2));
                    System.out.println("TOTAL COUNT :" + totalCount);
                    //    }
                    //   }
                    String[] args = {};
                    int ctc = 0, cnc = 0, ci = 0, tw = 0, cps = 0, cr = 0, cp = 0;

                    if (defaultModel.getValueAt(i, 2).toString().contains("}") || defaultModel.getValueAt(i, 2).toString().contains("}else{") || defaultModel.getValueAt(i, 2).toString().contains("class")|| defaultModel.getValueAt(i, 2).toString().contains("//")) {
                        defaultModel.setValueAt(0, i, 6);
                         defaultModel.setValueAt(0, i, 4);
                        tw = cnc + ctc + 0;
                    } else {
                        ci = CalcInheritanceMainFun(args);
                        defaultModel.setValueAt(calculateNested(), i, 4);
                        defaultModel.setValueAt(ci, i, 6);
                        // defaultModel.setValueAt(calculateNested(), k, 4);
                        tw = cnc + ctc + ci;
                    }

//                    defaultModel.setValueAt(calculateNested(), i, 4);
                    defaultModel.setValueAt(tw, i, 7);

                    cps = count * tw;
                    defaultModel.setValueAt(cps, i, 8);

                    cr = 2 * cps;
                    //df.setValueAt(cr, k, 9);

                     cp =cps + cr;
                    

                    if (defaultModel.getValueAt(i, 1).equals(name)) {
                        if (defaultModel.getValueAt(i, 2).toString().contains(";") || defaultModel.getValueAt(i, 2).toString().contains("{")) {

                            defaultModel.setValueAt(cr, i, 9);
                        }
                    }

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }                                        

    protected void np() {

    }


    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {                                     

        this.setState(1);

    }                                    

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {                                     

        if (JOptionPane.showConfirmDialog(rootPane, "Are you sure to exit the system ?") == 0) {

            System.exit(0);
        }
    }                                    

    public static String ARITHMETIC_OPS[] = {"++", "--", "+", "-", "*", "/", "%", "="};
    public static String RELATIONAL_OPS[] = {"==", "!=", ">=", "<=", ">", "<"};
    public static String LOGICAL_OPS[] = {"&&", "||", "!"};
    public static String BITWISE_OPERATORS[] = {"|", "^", "~", "<<", ">>", ">>>", "<<<"};
    public static String MISCELLEANEOUS_OPERATORS[] = {",", "->", ".", "::"};
    public static String ASSIGNMENT_OPERATORS[] = {"+=", "-=", "*=", "/=", ">>>=", "|=", "&=", "%=", "<<=", ">>=",
        "^="};
    public static String KEY_WORDS[] = {"void", "double", "int", "long", "float", "string", "String", "printf",
        "println", "cout", "cin", "if", "for", "while", "do-while", "switch", "case"};
    public static String MANIPULATORS[] = {"endl", "\n"};
    public static String SPECIAL_KEYWORDS[] = {"new", "delete", "throws", "throw"};
    public static String REFERENCE = "&";
    public static String DEREFERENCE = "*";
    public static String DATA_TYPES[] = {"boolean", "char", "byte", "byte", "int", "long", "float", "double", "void"};
    public static String NON_VALUE_EXCLUDE_LINE_KEYWORD[] = {"class", "else", "try", "include", "import"};

    public static String NON_VALUE_EXCLUDE_LINE_KEYWORD_CONTROL_TYPE[] = {"class", "try", "include", "import", "//"};

    public static String NON_VALUE_EXCLUDE_KEYWORD[] = {"public", "static", "return"};
    public static String NON_VALUE_EXTRACT_CONCAT_OPERATOR[] = {"{", "(", ")", "[", "]", ";", "\"", "\'"};
    public static String BRACE_NON[] = {"}"};

    public static String SIZE_FACTOR_CODE_COMPLEXITY = "size";
    public static String CONTROL_TYPE_FACTOR_CODE_COMPLEXITY = "control type";

    public static String JAVA_FILE_TYPE = "java";
    public static String CPP_FILE_TYPE = "cpp";
    public static String WHITESPACE_SPLITTER = "\\s+";

    public static String CONTROL_TYPE_SINGLE_VALUED[] = {"if", "else"};
    public static String CONTROL_TYPE_BITWISE[] = {"||", "&&", "|", "&"};
    public static String CONTROL_TYPE_DOUBLE_VALUED[] = {"for", "while", "do"};

    public String convertOpToRegex(String Operator) {
        if (Operator == null) {
            return null;
        }
        String convertedRegex = "";
        for (int i = 0; i < Operator.length(); i++) {
            convertedRegex += "[\\" + Operator.charAt(i) + "]";
        }
        return convertedRegex;
    }

    public Boolean isNonValueExcludeLine(String line) {
        for (String keyword : NON_VALUE_EXCLUDE_LINE_KEYWORD) {
            if (line.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    public Boolean isNonValueExcludeLine_ControlType(String line) {

        for (String keyword : NON_VALUE_EXCLUDE_LINE_KEYWORD_CONTROL_TYPE) {
            if (line.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    public Boolean isNonValueExcludeConcat(String line) {

        for (String keyword : NON_VALUE_EXTRACT_CONCAT_OPERATOR) {
            if (line.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    public int calculateSizefactorPerLine(String line) {

        int totalSizeComplexityPerLine = 0;
        line = commentsOmmited(line).trim();

        totalSizeComplexityPerLine += getQuotationCount(line);

        line = quotationsOmmited(line).trim();

        totalSizeComplexityPerLine += getSizeComplexity_Operator(line);

        line = replaceOperators_WithWhiteSpace(line).trim();

        totalSizeComplexityPerLine += getSizeComplexity_Keyword(line);

        line = replaceKeywords_WithWhiteSpace(line).trim();

        totalSizeComplexityPerLine += getVariableNameCount(line);

        return totalSizeComplexityPerLine;

    }

    public String commentsOmmited(String line) {
        Pattern p = Pattern.compile("//.*|(\"(?:\\\\[^\"]|\\\\\"|.)*?\")|(?s)/\\*.*?\\*/");
        Matcher m = p.matcher(line);

        while (m.find()) {
            line = line.replace(m.group(), " ");
            //System.out.println("Quotes "+line);
        }
        return line;
    }

    public String quotationsOmmited(String line) {

        Pattern p = Pattern.compile("\"([^\"]*)\"");
        Matcher m = p.matcher(line);
        while (m.find()) {
            line = line.replace(m.group(), " ");
        }

        return line;
    }

    public int getQuotationCount(String line) {

        Pattern p = Pattern.compile("\"([^\"]*)\"");
        Matcher m = p.matcher(line);
        int quotationCounter = 0;
        while (m.find()) {

            quotationCounter += m.groupCount();
        }
        System.out.println("LINE " + line);
        // System.out.println("QUOTATION COUNT "+quotationCounter);
        return quotationCounter;
    }

    public int getSizeComplexity_Operator(String line) {

        int costForOperator_BasedOnLine = 0;
        //	Example1 example1 = new Example1();

        ArrayList<String> singleValuedCollectiveList = new ArrayList<String>();
        ArrayList<String> doubleValuedCollectiveList = new ArrayList<String>();

        singleValuedCollectiveList.addAll(Arrays.asList(ASSIGNMENT_OPERATORS));
        singleValuedCollectiveList.addAll(Arrays.asList(MISCELLEANEOUS_OPERATORS));
        singleValuedCollectiveList.addAll(Arrays.asList(RELATIONAL_OPS));
        singleValuedCollectiveList.addAll(Arrays.asList(LOGICAL_OPS));
        singleValuedCollectiveList.addAll(Arrays.asList(BITWISE_OPERATORS));
        singleValuedCollectiveList.addAll(Arrays.asList(ARITHMETIC_OPS));

        doubleValuedCollectiveList.addAll(Arrays.asList(REFERENCE));
        //if (!fileType.equals(Example1.CPP_FILE_TYPE)) {
        doubleValuedCollectiveList.addAll(Arrays.asList(DEREFERENCE));
        //}
        Pattern pattern;

        for (String singleValuedOp : singleValuedCollectiveList) {
            String regExp = convertOpToRegex(singleValuedOp);
            pattern = Pattern.compile(regExp);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {
                //System.out.println("1OP : "+matcher.group());
                costForOperator_BasedOnLine++;

            }
            line = matcher.replaceAll(" ");
        }

        for (String doubleValuedOp : doubleValuedCollectiveList) {
            String regExp = convertOpToRegex(doubleValuedOp);
            pattern = Pattern.compile(regExp);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {
                //System.out.println("2OP : "+matcher.group());
                costForOperator_BasedOnLine += 2;

            }
            line = matcher.replaceAll(" ");
        }

        return costForOperator_BasedOnLine;
    }

    public String replaceOperators_WithWhiteSpace(String line) {
        //Example1 example1 = new Example1();

        ArrayList<String> collectiveLsit = new ArrayList<String>();
        collectiveLsit.addAll(Arrays.asList(NON_VALUE_EXTRACT_CONCAT_OPERATOR));
        collectiveLsit.addAll(Arrays.asList(ASSIGNMENT_OPERATORS));
        collectiveLsit.addAll(Arrays.asList(MISCELLEANEOUS_OPERATORS));
        collectiveLsit.addAll(Arrays.asList(RELATIONAL_OPS));
        collectiveLsit.addAll(Arrays.asList(LOGICAL_OPS));
        collectiveLsit.addAll(Arrays.asList(BITWISE_OPERATORS));
        collectiveLsit.addAll(Arrays.asList(ARITHMETIC_OPS));

        collectiveLsit.addAll(Arrays.asList(REFERENCE));
        //if (!fileType.equals(Example1.CPP_FILE_TYPE)) {
        collectiveLsit.addAll(Arrays.asList(DEREFERENCE));
        //}
        Pattern pattern;

        for (String operator : collectiveLsit) {
            String regExp = convertOpToRegex(operator);
            pattern = Pattern.compile(regExp);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {
                line = matcher.replaceAll(" ");
            }
        }

        return line;
    }

    public int getSizeComplexity_Keyword(String line) {

        int costForKeyword_BasedOnLine = 0;
        String whitespace = "([\"\\s+\"]|[\"\\(\"])+";

        ArrayList<String> singleValuedCollectiveList = new ArrayList<String>();
        singleValuedCollectiveList.addAll(Arrays.asList(KEY_WORDS));
        singleValuedCollectiveList.addAll(Arrays.asList(MANIPULATORS));

        ArrayList<String> doubleValuedCollectiveList = new ArrayList<String>();
        doubleValuedCollectiveList.addAll(Arrays.asList(SPECIAL_KEYWORDS));

        Pattern pattern;

        for (String singleValuedKey : singleValuedCollectiveList) {
            String regExp = singleValuedKey + whitespace;
            pattern = Pattern.compile(regExp);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {

                costForKeyword_BasedOnLine++;
            }
            line = matcher.replaceAll(" ");
        }

        for (String doubleValuedKey : doubleValuedCollectiveList) {
            String regExp = doubleValuedKey + whitespace;
            pattern = Pattern.compile(regExp);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {

                costForKeyword_BasedOnLine += 2;

            }
            line = matcher.replaceAll(" ");
        }

        return costForKeyword_BasedOnLine;
    }

    public String replaceKeywords_WithWhiteSpace(String line) {

        String whitespace = "([\"\\s+\"]|[\"\\(\"])+";

        ArrayList<String> collectiveLsit = new ArrayList<String>();
        collectiveLsit.addAll(Arrays.asList(KEY_WORDS));
        collectiveLsit.addAll(Arrays.asList(MANIPULATORS));
        collectiveLsit.addAll(Arrays.asList(SPECIAL_KEYWORDS));
        collectiveLsit.addAll(Arrays.asList(NON_VALUE_EXCLUDE_KEYWORD));
        Pattern pattern;

        for (String keyword : collectiveLsit) {
            String regExp = keyword;
            pattern = Pattern.compile(regExp + whitespace);
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {
                line = matcher.replaceAll(" ");
            }
        }

        return line;
    }

    public int getVariableNameCount(String line) {

        int variableNameCounter = 0;
        //System.out.println("Line "+line);

        if (line == "}" || line.isEmpty()) {
            return 0;
        } else {
            String splittedArr[] = line.trim().split("\\s+");
            for (String spliitedWord : splittedArr) {
                //System.out.println("VAR_LIST "+spliitedWord);
                if (spliitedWord.contains("}")) {
                    variableNameCounter = splittedArr.length - 1;
                } else {
                    variableNameCounter = splittedArr.length;
                }
                //variableNameCounter = splittedArr.length;
            }

            return variableNameCounter;
        }
    }

    public static int CalcInheritanceMainFun(String[] args) throws IOException {

//		System.out.println("Enter the Location Of Your Class : ");
//		
//		Scanner string = new Scanner(System.in);
//		
//		String p = string.next();
        String p = "C:\\Users\\3c TECH\\eclipse-workspace\\ComplexityMeasuring\\testfile.java";

        String extension = "";

        int i = p.lastIndexOf('.');

        if (i > 0) {

            extension = p.substring(i + 1);

        }

        File f = new File(p);
        Scanner input = new Scanner(f);

        int classCount = 0;
        while (input.hasNext()) {

            String word = input.next();

            if (word.contains("class")) {

                classCount += 1;
            }
        }

        if (extension.equals("java")) {

            if (classCount >= 2) {

//        	   CheckFile_JAVA checkClass = new CheckFile_JAVA();
//        	   checkClass.checkCompexityINFile(p,args);
//        	   System.out.println("Complexity of inheritance of a class : "+checkCompexityINFile(p,args));
                return checkCompexityINFile(p, args);

            } else {

//        	   CheckFolder_JAVA checkFolder = new CheckFolder_JAVA();
//        	   checkFolder.checkComplexityINFolder(p, args);
//        	   System.out.println("Complexity of inheritance of a class : "+checkComplexityINFolder(p, args));
                return checkComplexityINFolder(p, args);

            }

        } else if (extension.equals("cpp")) {

            if (classCount >= 2) {

//    			CheckClass_CFile checkClass = new CheckClass_CFile();
//         	   checkClass.checkComplexityInFileC(p,args);
//    			System.out.println("Complexity of inheritance of a class : "+checkComplexityInFileC(p,args));
                return checkComplexityInFileC(p, args);

            } else {

//            	CheckFolder_CFile checkFolder = new CheckFolder_CFile();
//         	  checkFolder.checkComplexityInFolderC(p, args);
//            	System.out.println("Complexity of inheritance of a class : "+checkComplexityInFolderC(p, args));
                return checkComplexityInFolderC(p, args);

            }

        }
        return 0;

    }

    public static int checkCompexityINFile(String newPath, String[] args) throws IOException {

        int superClass = 1;
        String classname = null;

        File f = new File(newPath);
        Scanner input = new Scanner(f);

        int count = 0;
        while (input.hasNext()) {
            String word = input.next();
            System.out.println(word);
            if (word.equals("extends")) {
                superClass += 1;
                word = input.next();

                System.out.println("WORD:" + word);
                String[] className = word.split("[{]");

                System.out.println("CLASS" + className[0]);

                classname = className[0];

            }

            if (word.equals(classname)) {
                if (input.next().contains("extends")) {
                    String[] className = word.split("[{]");

                    System.out.println("CLASS" + className[0]);

                    classname = className[0];

                    superClass += 1;
                }
            }

        }

//        System.out.println("Number of Ancestor classes : "+superClass);
        int complexity = superClass + 1;
//        System.out.println("Complexity of inheritance of a class : "+complexity);

        return complexity;
    }

    public static int checkComplexityINFolder(String newPath, String[] args) throws IOException {

//		 p = "C:\\Users\\HP\\eclipse-workspace\\inheritancePro\\src\\inheritancePro\\CustomerDTO.java";
        int superClass = 1;

        while (newPath != null) {

            File f = new File(newPath);
            Scanner input = new Scanner(f);

            while (input.hasNextLine()) {

                String line = input.nextLine();

                if (line.contains("extends")) {

                    superClass += 1;

                    String[] val = line.split("extends");
                    String[] classNameWithSpace = val[1].split("[{]");
                    String[] className = classNameWithSpace[0].split(" ");

                    Path path = Paths.get(f.getAbsolutePath(), args);
                    String directory = path.getParent().toString();

                    newPath = directory + "\\" + className[1] + ".java";

                    break;

                } else {
                    newPath = null;
                }

            }

        }
//	        System.out.println("Number of Ancestor classes : "+superClass);
        int complexity = superClass + 1;
//	        System.out.println("Complexity Due to inheritance : "+complexity);

        return complexity;

    }

    public static int checkComplexityInFileC(String path, String[] args) throws IOException {

        File f = new File(path);
        Scanner input = new Scanner(f);

        int count = 0;

        while (input.hasNextLine()) {

            String line = input.nextLine();
            if (line.contains("class") && line.contains(":")) {
                if (line.contains(",")) {
                    String[] values = line.split(",");
                    count += values.length;
                } else {
                    count += 1;
                }
            }
        }
//           System.out.println("count: "+count);

        return count + 1;

    }

    public static int checkComplexityInFolderC(String path, String[] args) throws IOException {

        File f = new File(path);
        Scanner input = new Scanner(f);

        int count = 0;

        return count + 1;

    }

    public int calculateNested() throws IOException {

//		Essentials part = new Essentials();
//		int linecount = 0;
        int count = 0;
//		
        File file = new File("C:\\Users\\3c TECH\\eclipse-workspace\\ComplexityMeasuring\\testfile.java");
        Scanner input = new Scanner(file);
//
//			count = part.calcComplexityPerLine(input.nextLine());
//
//            String block = input.next();
//
//				linecount++;
        count = calcComplexityPerLine(input.nextLine());

        return count;

    }

    public int checkControlStructures(String line) throws FileNotFoundException {

        File file = new File("C:\\Users\\3c TECH\\eclipse-workspace\\ComplexityMeasuring\\testfile.java");
        Scanner input = new Scanner(file);

        int count = 0;
        while (input.hasNextLine()) {
            //System.out.println("Line"+input.nextLine());
            String block = input.next();
            if (block.contains("if")) {
                count++;
                System.out.println(input.nextLine() + "--------------" + count);
                if (block.contains("if(")) {
                    count++;
                    System.out.println(input.nextLine() + "--------------" + count);
                    if (block.contains("&&")) {
                        count++;
                        System.out.println(input.nextLine() + "--------------" + count);
                    }
                    if (block.contains("||")) {
                        count++;
                        System.out.println(input.nextLine() + "--------------" + count);
                    }
                    if (block.contains("&")) {
                        count++;
                        System.out.println(input.nextLine() + "--------------" + count);
                    }
                    if (block.contains("|")) {
                        count++;
                        System.out.println(input.nextLine() + "--------------" + count);
                    }
                }
                if (block.contains("&&")) {
                    count++;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("||")) {
                    count++;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("&")) {
                    count++;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("|")) {
                    count++;
                    System.out.println(input.nextLine() + "--------------" + count);
                }

            }

            //Iterative control structures : weight is 2
            if (block.contains("for")) {
                count = count + 2;
                System.out.println(input.nextLine() + "--------------" + count);
                if (block.contains("&&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("||")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("|")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
            }
            if (block.contains("while")) {
                count = count + 2;
                System.out.println(input.nextLine() + "--------------" + count);
                if (block.contains("&&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("||")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("|")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
            }
            if (block.contains("do while")) {
                count = count + 2;
                System.out.println(input.nextLine() + "--------------" + count);
                if (block.contains("&&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("||")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("&")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
                if (block.contains("|")) {
                    count = count + 2;
                    System.out.println(input.nextLine() + "--------------" + count);
                }
            }

            //catch statements : weight is 1
            if (block.contains("catch")) {
                count++;
                System.out.println(input.nextLine() + "--------------" + count);
            }

            //switch  statments		
            if (block.contains("switch")) {
                count++;
                System.out.println(input.nextLine() + "--------------" + count);

                String[] b = block.split("default");
                String bString = b.toString();
                for (int i = 0; i <= b.length; i++) {
                    if (bString.contains("case")) {

                        count++;
                        System.out.println(input.nextLine() + "--------------" + count);
                    }
                }
            }

        }
        System.out.println("Ctc is " + count);
        return count;

    }

    public int calcComplexityPerLine(String line) throws FileNotFoundException {

        int totalSizeComplexityPerLine = 0;

        totalSizeComplexityPerLine += checkControlStructures(line);

        return totalSizeComplexityPerLine;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                recursion n = new recursion();
                AWTUtilities.setWindowOpaque(n, false);
                LookAndFeel look = new SubstanceDefaultLookAndFeel();

                try {
                    UIManager.setLookAndFeel(look);
                } catch (UnsupportedLookAndFeelException ex) {
                }
                SubstanceDefaultLookAndFeel.setCurrentTheme(new SubstanceSunsetTheme());
                SubstanceDefaultLookAndFeel.setCurrentWatermark(new SubstanceFabricWatermark());
                SubstanceDefaultLookAndFeel.setCurrentGradientPainter(new GradientWaveGradientPainter());
                SubstanceDefaultLookAndFeel.setCurrentButtonShaper(new ClassicButtonShaper());
                SubstanceDefaultLookAndFeel.setCurrentBorderPainter("Classic Inner");
                n.setDefaultLookAndFeelDecorated(true);
                n.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   

//    jjnnjcvjsjsvd
}

